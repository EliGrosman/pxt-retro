{
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and `max`.",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "String.charAt": "Returns the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Returns the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "Determines whether relative order of two strings (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "arithmetic.add": "Add contents of Rs to contents of Rd and place result in Rd",
  "arithmetic.addImm": "Add 8-bit immediate value C to contents of Rd and place result in Rd",
  "arithmetic.sub": "Subtract contents of Rs from contents of Rd and place result in Rd",
  "arithmetic.subImm": "Subtract 8-bit immediate value C from contents of Rd and place result in Rd",
  "console.log": "Print out message",
  "control.beq": "B = branch on condition",
  "control.cmp": "Compare contents of Rs and Rd",
  "control.label": "a label to jump to",
  "io.queueIn": "Load into Rd the next 32-bit value in the input queue, if not empty.\nIf the input queue is empty, stop program execution.",
  "io.queueOut": "Store into the output queue the 32-bit value in Rd.",
  "logical.and": "Logical AND the contents of Rd with the contents of Rs and place result in Rd",
  "logical.eor": "Logical EOR the contents of Rd with the contents of Rs and place result in Rd",
  "logical.neg": "Logically negate of the contents of Rs and place result in Rd",
  "logical.orr": "Logical OR the contents of Rd with the contents of Rs and place result in Rd",
  "memory.ldr": "Load into Rd the 32-bit value at the address specified by Rb",
  "memory.set": "Eli",
  "memory.str": "Store the 32-bit value in Rd at the address specified by Rb",
  "shift.lsl": "Shift Rs left by 5-bit immediate value C and place result in Rd",
  "shift.lsr": "Shift Rs right by 5-bit immediate value C and place result in Rd"
}